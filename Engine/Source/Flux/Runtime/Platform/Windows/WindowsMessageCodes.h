#pragma once

namespace Flux {

	namespace Utils {

		inline static std::unordered_map<uint32, const char*> s_MessageStrings = []()
		{
			std::unordered_map<uint32, const char*> result;

#define MSG(name) result[name] = #name

			MSG(WM_NULL);
			MSG(WM_CREATE);
			MSG(WM_DESTROY);
			MSG(WM_MOVE);
			MSG(WM_SIZE);
			MSG(WM_ACTIVATE);
			MSG(WM_SETFOCUS);
			MSG(WM_KILLFOCUS);
			MSG(WM_ENABLE);
			MSG(WM_SETREDRAW);
			MSG(WM_SETTEXT);
			MSG(WM_GETTEXT);
			MSG(WM_GETTEXTLENGTH);
			MSG(WM_PAINT);
			MSG(WM_CLOSE);
			MSG(WM_QUERYENDSESSION);
			MSG(WM_QUERYOPEN);
			MSG(WM_ENDSESSION);
			MSG(WM_QUIT);
			MSG(WM_ERASEBKGND);
			MSG(WM_SYSCOLORCHANGE);
			MSG(WM_SHOWWINDOW);
			MSG(WM_WININICHANGE);
			MSG(WM_SETTINGCHANGE);
			MSG(WM_DEVMODECHANGE);
			MSG(WM_ACTIVATEAPP);
			MSG(WM_FONTCHANGE);
			MSG(WM_TIMECHANGE);
			MSG(WM_CANCELMODE);
			MSG(WM_SETCURSOR);
			MSG(WM_MOUSEACTIVATE);
			MSG(WM_CHILDACTIVATE);
			MSG(WM_QUEUESYNC);
			MSG(WM_GETMINMAXINFO);
			MSG(WM_PAINTICON);
			MSG(WM_ICONERASEBKGND);
			MSG(WM_NEXTDLGCTL);
			MSG(WM_SPOOLERSTATUS);
			MSG(WM_DRAWITEM);
			MSG(WM_MEASUREITEM);
			MSG(WM_DELETEITEM);
			MSG(WM_VKEYTOITEM);
			MSG(WM_CHARTOITEM);
			MSG(WM_SETFONT);
			MSG(WM_GETFONT);
			MSG(WM_SETHOTKEY);
			MSG(WM_GETHOTKEY);
			MSG(WM_QUERYDRAGICON);
			MSG(WM_COMPAREITEM);
			MSG(WM_GETOBJECT);
			MSG(WM_COMPACTING);
			MSG(WM_COMMNOTIFY);
			MSG(WM_WINDOWPOSCHANGING);
			MSG(WM_WINDOWPOSCHANGED);
			MSG(WM_POWER);
			MSG(WM_COPYDATA);
			MSG(WM_CANCELJOURNAL);
			MSG(WM_NOTIFY);
			MSG(WM_INPUTLANGCHANGEREQUEST);
			MSG(WM_INPUTLANGCHANGE);
			MSG(WM_TCARD);
			MSG(WM_HELP);
			MSG(WM_USERCHANGED);
			MSG(WM_NOTIFYFORMAT);
			MSG(WM_CONTEXTMENU);
			MSG(WM_STYLECHANGING);
			MSG(WM_STYLECHANGED);
			MSG(WM_DISPLAYCHANGE);
			MSG(WM_GETICON);
			MSG(WM_SETICON);
			MSG(WM_NCCREATE);
			MSG(WM_NCDESTROY);
			MSG(WM_NCCALCSIZE);
			MSG(WM_NCHITTEST);
			MSG(WM_NCPAINT);
			MSG(WM_NCACTIVATE);
			MSG(WM_GETDLGCODE);
			MSG(WM_SYNCPAINT);
			MSG(WM_NCMOUSEMOVE);
			MSG(WM_NCLBUTTONDOWN);
			MSG(WM_NCLBUTTONUP);
			MSG(WM_NCLBUTTONDBLCLK);
			MSG(WM_NCRBUTTONDOWN);
			MSG(WM_NCRBUTTONUP);
			MSG(WM_NCRBUTTONDBLCLK);
			MSG(WM_NCMBUTTONDOWN);
			MSG(WM_NCMBUTTONUP);
			MSG(WM_NCMBUTTONDBLCLK);
			MSG(WM_NCXBUTTONDOWN);
			MSG(WM_NCXBUTTONUP);
			MSG(WM_NCXBUTTONDBLCLK);
			MSG(WM_INPUT_DEVICE_CHANGE);
			MSG(WM_INPUT);
			MSG(WM_KEYFIRST);
			MSG(WM_KEYDOWN);
			MSG(WM_KEYUP);
			MSG(WM_CHAR);
			MSG(WM_DEADCHAR);
			MSG(WM_SYSKEYDOWN);
			MSG(WM_SYSKEYUP);
			MSG(WM_SYSCHAR);
			MSG(WM_SYSDEADCHAR);
			MSG(WM_UNICHAR);
			MSG(WM_KEYLAST);
			MSG(WM_KEYLAST);
			MSG(WM_IME_STARTCOMPOSITION);
			MSG(WM_IME_ENDCOMPOSITION);
			MSG(WM_IME_COMPOSITION);
			MSG(WM_IME_KEYLAST);
			MSG(WM_INITDIALOG);
			MSG(WM_COMMAND);
			MSG(WM_SYSCOMMAND);
			MSG(WM_TIMER);
			MSG(WM_HSCROLL);
			MSG(WM_VSCROLL);
			MSG(WM_INITMENU);
			MSG(WM_INITMENUPOPUP);
			MSG(WM_GESTURE);
			MSG(WM_GESTURENOTIFY);
			MSG(WM_MENUSELECT);
			MSG(WM_MENUCHAR);
			MSG(WM_ENTERIDLE);
			MSG(WM_MENURBUTTONUP);
			MSG(WM_MENUDRAG);
			MSG(WM_MENUGETOBJECT);
			MSG(WM_UNINITMENUPOPUP);
			MSG(WM_MENUCOMMAND);
			MSG(WM_CHANGEUISTATE);
			MSG(WM_UPDATEUISTATE);
			MSG(WM_QUERYUISTATE);
			MSG(WM_CTLCOLORMSGBOX);
			MSG(WM_CTLCOLOREDIT);
			MSG(WM_CTLCOLORLISTBOX);
			MSG(WM_CTLCOLORBTN);
			MSG(WM_CTLCOLORDLG);
			MSG(WM_CTLCOLORSCROLLBAR);
			MSG(WM_CTLCOLORSTATIC);
			MSG(WM_MOUSEFIRST);
			MSG(WM_MOUSEMOVE);
			MSG(WM_LBUTTONDOWN);
			MSG(WM_LBUTTONUP);
			MSG(WM_LBUTTONDBLCLK);
			MSG(WM_RBUTTONDOWN);
			MSG(WM_RBUTTONUP);
			MSG(WM_RBUTTONDBLCLK);
			MSG(WM_MBUTTONDOWN);
			MSG(WM_MBUTTONUP);
			MSG(WM_MBUTTONDBLCLK);
			MSG(WM_MOUSEWHEEL);
			MSG(WM_XBUTTONDOWN);
			MSG(WM_XBUTTONUP);
			MSG(WM_XBUTTONDBLCLK);
			MSG(WM_MOUSEHWHEEL);
			MSG(WM_MOUSELAST);
			MSG(WM_MOUSELAST);
			MSG(WM_MOUSELAST);
			MSG(WM_MOUSELAST);
			MSG(WM_PARENTNOTIFY);
			MSG(WM_ENTERMENULOOP);
			MSG(WM_EXITMENULOOP);
			MSG(WM_NEXTMENU);
			MSG(WM_SIZING);
			MSG(WM_CAPTURECHANGED);
			MSG(WM_MOVING);
			MSG(WM_POWERBROADCAST);
			MSG(WM_DEVICECHANGE);
			MSG(WM_MDICREATE);
			MSG(WM_MDIDESTROY);
			MSG(WM_MDIACTIVATE);
			MSG(WM_MDIRESTORE);
			MSG(WM_MDINEXT);
			MSG(WM_MDIMAXIMIZE);
			MSG(WM_MDITILE);
			MSG(WM_MDICASCADE);
			MSG(WM_MDIICONARRANGE);
			MSG(WM_MDIGETACTIVE);
			MSG(WM_MDISETMENU);
			MSG(WM_ENTERSIZEMOVE);
			MSG(WM_EXITSIZEMOVE);
			MSG(WM_DROPFILES);
			MSG(WM_MDIREFRESHMENU);
			MSG(WM_POINTERDEVICECHANGE);
			MSG(WM_POINTERDEVICEINRANGE);
			MSG(WM_POINTERDEVICEOUTOFRANGE);
			MSG(WM_TOUCH);
			MSG(WM_NCPOINTERUPDATE);
			MSG(WM_NCPOINTERDOWN);
			MSG(WM_NCPOINTERUP);
			MSG(WM_POINTERUPDATE);
			MSG(WM_POINTERDOWN);
			MSG(WM_POINTERUP);
			MSG(WM_POINTERENTER);
			MSG(WM_POINTERLEAVE);
			MSG(WM_POINTERACTIVATE);
			MSG(WM_POINTERCAPTURECHANGED);
			MSG(WM_TOUCHHITTESTING);
			MSG(WM_POINTERWHEEL);
			MSG(WM_POINTERHWHEEL);
			MSG(WM_IME_SETCONTEXT);
			MSG(WM_IME_NOTIFY);
			MSG(WM_IME_CONTROL);
			MSG(WM_IME_COMPOSITIONFULL);
			MSG(WM_IME_SELECT);
			MSG(WM_IME_CHAR);
			MSG(WM_IME_REQUEST);
			MSG(WM_IME_KEYDOWN);
			MSG(WM_IME_KEYUP);
			MSG(WM_MOUSEHOVER);
			MSG(WM_MOUSELEAVE);
			MSG(WM_NCMOUSEHOVER);
			MSG(WM_NCMOUSELEAVE);
			MSG(WM_WTSSESSION_CHANGE);
			MSG(WM_TABLET_FIRST);
			MSG(WM_TABLET_LAST);
			MSG(WM_CUT);
			MSG(WM_COPY);
			MSG(WM_PASTE);
			MSG(WM_CLEAR);
			MSG(WM_UNDO);
			MSG(WM_RENDERFORMAT);
			MSG(WM_RENDERALLFORMATS);
			MSG(WM_DESTROYCLIPBOARD);
			MSG(WM_DRAWCLIPBOARD);
			MSG(WM_PAINTCLIPBOARD);
			MSG(WM_VSCROLLCLIPBOARD);
			MSG(WM_SIZECLIPBOARD);
			MSG(WM_ASKCBFORMATNAME);
			MSG(WM_CHANGECBCHAIN);
			MSG(WM_HSCROLLCLIPBOARD);
			MSG(WM_QUERYNEWPALETTE);
			MSG(WM_PALETTEISCHANGING);
			MSG(WM_PALETTECHANGED);
			MSG(WM_HOTKEY);
			MSG(WM_PRINT);
			MSG(WM_PRINTCLIENT);
			MSG(WM_APPCOMMAND);
			MSG(WM_THEMECHANGED);
			MSG(WM_CLIPBOARDUPDATE);
			MSG(WM_DWMCOMPOSITIONCHANGED);
			MSG(WM_DWMNCRENDERINGCHANGED);
			MSG(WM_DWMCOLORIZATIONCOLORCHANGED);
			MSG(WM_DWMWINDOWMAXIMIZEDCHANGE);
			MSG(WM_DWMSENDICONICTHUMBNAIL);
			MSG(WM_DWMSENDICONICLIVEPREVIEWBITMAP);
			MSG(WM_GETTITLEBARINFOEX);
			MSG(WM_HANDHELDFIRST);
			MSG(WM_HANDHELDLAST);
			MSG(WM_AFXFIRST);
			MSG(WM_AFXLAST);
			MSG(WM_PENWINFIRST);
			MSG(WM_PENWINLAST);
			MSG(WM_APP);
			MSG(WM_USER);

			return result;
		}();

		inline static const char* WindowsMessageCodeToString(uint32 message)
		{
			auto it = s_MessageStrings.find(message);
			if (it != s_MessageStrings.end())
				return it->second;
			return "";
		}

	}

}